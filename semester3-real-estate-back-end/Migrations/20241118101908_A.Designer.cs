// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using semester3_real_estate_back_end.Data;

#nullable disable

namespace semester3_real_estate_back_end.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241118101908_A")]
    partial class A
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "70acc54a-44e0-4d31-8b07-52b5b82e9e55",
                            RoleId = "ffe56d39-3939-4c5c-ade9-8f147dca9591"
                        },
                        new
                        {
                            UserId = "4a9cd504-f018-4574-a525-98c07a998678",
                            RoleId = "28a11887-8723-4f56-a83f-f8d43529dfb9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = "ffe56d39-3939-4c5c-ade9-8f147dca9592",
                            Name = "Category 1",
                            UpdatedAt = new DateTime(2024, 11, 18, 17, 19, 7, 989, DateTimeKind.Local).AddTicks(7028)
                        },
                        new
                        {
                            CategoryId = "ffe56d39-3939-4c5c-ade9-8f147dca9593",
                            Name = "Category 2",
                            UpdatedAt = new DateTime(2024, 11, 18, 17, 19, 7, 989, DateTimeKind.Local).AddTicks(7040)
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Direction", b =>
                {
                    b.Property<string>("DirectionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DirectionId");

                    b.ToTable("Direction");

                    b.HasData(
                        new
                        {
                            DirectionId = "ffe56d39-3939-4c5c-ade9-8f147dca9593",
                            Name = "Direction 1"
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.District", b =>
                {
                    b.Property<string>("DistrictId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("District");

                    b.HasData(
                        new
                        {
                            DistrictId = "ffe56d39-3939-4c5c-ade9-8f147dca9596",
                            Name = "District 1",
                            ProvinceId = "ffe56d39-3939-4c5c-ade9-8f147dca9596"
                        },
                        new
                        {
                            DistrictId = "ffe56d39-3939-4c5c-ade9-8f147dca9597",
                            Name = "District 2",
                            ProvinceId = "ffe56d39-3939-4c5c-ade9-8f147dca9596"
                        },
                        new
                        {
                            DistrictId = "ffe56d39-3939-4c5c-ade9-8f147dca9598",
                            Name = "District 3",
                            ProvinceId = "ffe56d39-3939-4c5c-ade9-8f147dca9597"
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Juridical", b =>
                {
                    b.Property<string>("JuridicalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("JuridicalId");

                    b.ToTable("Juridical");

                    b.HasData(
                        new
                        {
                            JuridicalId = "ffe56d39-3939-4c5c-ade9-8f147dca9594",
                            Name = "Direction 1"
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Property", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Area")
                        .HasColumnType("REAL");

                    b.Property<int>("Bathroom")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bedroom")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DirectionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Floor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JuridicalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("PropertyTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WardId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PropertyId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DirectionId");

                    b.HasIndex("JuridicalId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("WardId");

                    b.ToTable("Property");

                    b.HasData(
                        new
                        {
                            PropertyId = "ffe56d39-3939-4c5c-ade9-8f147dca9581",
                            Address = "Address 1",
                            Area = 10.0,
                            Bathroom = 1,
                            Bedroom = 1,
                            CategoryId = "ffe56d39-3939-4c5c-ade9-8f147dca9592",
                            CreatedAt = new DateTime(2024, 11, 18, 17, 19, 7, 989, DateTimeKind.Local).AddTicks(7287),
                            Description = "Description",
                            DirectionId = "ffe56d39-3939-4c5c-ade9-8f147dca9593",
                            Floor = 1,
                            JuridicalId = "ffe56d39-3939-4c5c-ade9-8f147dca9594",
                            Price = 10.0,
                            PropertyTypeId = "ffe56d39-3939-4c5c-ade9-8f147dca9595",
                            Title = "Property title 1",
                            UpdatedAt = new DateTime(2024, 11, 18, 17, 19, 7, 989, DateTimeKind.Local).AddTicks(7288),
                            ViewCount = 0,
                            WardId = "ffe56d39-3939-4c5c-ade9-8f147dca9596"
                        },
                        new
                        {
                            PropertyId = "ffe56d39-3939-4c5c-ade9-8f147dca9582",
                            Address = "Address 2",
                            Area = 10.0,
                            Bathroom = 1,
                            Bedroom = 1,
                            CategoryId = "ffe56d39-3939-4c5c-ade9-8f147dca9592",
                            CreatedAt = new DateTime(2024, 11, 18, 17, 19, 7, 989, DateTimeKind.Local).AddTicks(7292),
                            Description = "Description",
                            DirectionId = "ffe56d39-3939-4c5c-ade9-8f147dca9593",
                            Floor = 1,
                            JuridicalId = "ffe56d39-3939-4c5c-ade9-8f147dca9594",
                            Price = 20.0,
                            PropertyTypeId = "ffe56d39-3939-4c5c-ade9-8f147dca9595",
                            Title = "Property title 2 ",
                            UpdatedAt = new DateTime(2024, 11, 18, 17, 19, 7, 989, DateTimeKind.Local).AddTicks(7292),
                            ViewCount = 0,
                            WardId = "ffe56d39-3939-4c5c-ade9-8f147dca9597"
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.PropertyImage", b =>
                {
                    b.Property<string>("PropertyImageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PropertyImageId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImage");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.PropertyType", b =>
                {
                    b.Property<string>("PropertyTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PropertyTypeId");

                    b.ToTable("PropertyType");

                    b.HasData(
                        new
                        {
                            PropertyTypeId = "ffe56d39-3939-4c5c-ade9-8f147dca9595",
                            Name = "PropertyType 1"
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Province", b =>
                {
                    b.Property<string>("ProvinceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProvinceId");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            ProvinceId = "ffe56d39-3939-4c5c-ade9-8f147dca9596",
                            Name = "Province 1"
                        },
                        new
                        {
                            ProvinceId = "ffe56d39-3939-4c5c-ade9-8f147dca9597",
                            Name = "Province 2"
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ffe56d39-3939-4c5c-ade9-8f147dca9591",
                            ConcurrencyStamp = "239fb660-9b66-4c31-a4d3-e2112da27b41",
                            Description = "Admin role",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "28a11887-8723-4f56-a83f-f8d43529dfb9",
                            ConcurrencyStamp = "466cb5ae-fc31-4573-b1d7-e3a1e15a5010",
                            Description = "User role",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "70acc54a-44e0-4d31-8b07-52b5b82e9e55",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9934c5a0-6bfd-4fde-936d-c3ece61cf8d2",
                            Email = "cuong@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUONG@GMAIL.COM",
                            NormalizedUserName = "CUONG",
                            PasswordHash = "AQAAAAIAAYagAAAAEI/SWx93eTcgVMH5ll0cl2UAVQPvI9XX0kQPwNxgyGcz5ud88hHLZCxsxoQevxeeig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5VQFXGIF4X76SDIO4OLC3YTSQRVEZQDW",
                            TwoFactorEnabled = false,
                            UserName = "cuong"
                        },
                        new
                        {
                            Id = "4a9cd504-f018-4574-a525-98c07a998678",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "263312b7-be37-4d7f-bfd5-f8e935323be5",
                            Email = "daica@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "DAICA@GMAIL.COM",
                            NormalizedUserName = "DAICA",
                            PasswordHash = "AQAAAAIAAYagAAAAEFfBxpYGAi+a0Iog6fqmUcgFkirdMOqUynFaOVSoy9DsmTor/h7YSfKuQW2HZzLHmg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "RMVH3XFWGDEAFBVLMZBEHMGQF7LUOUVW",
                            TwoFactorEnabled = false,
                            UserName = "daica"
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Ward", b =>
                {
                    b.Property<string>("WardId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("WardId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Ward");

                    b.HasData(
                        new
                        {
                            WardId = "ffe56d39-3939-4c5c-ade9-8f147dca9596",
                            DistrictId = "ffe56d39-3939-4c5c-ade9-8f147dca9596",
                            Name = "Ward 1"
                        },
                        new
                        {
                            WardId = "ffe56d39-3939-4c5c-ade9-8f147dca9597",
                            DistrictId = "ffe56d39-3939-4c5c-ade9-8f147dca9597",
                            Name = "Ward 2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semester3_real_estate_back_end.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.District", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Property", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.Category", "Category")
                        .WithMany("Properties")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semester3_real_estate_back_end.Models.Direction", "Direction")
                        .WithMany("Properties")
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semester3_real_estate_back_end.Models.Juridical", "Juridical")
                        .WithMany("Properties")
                        .HasForeignKey("JuridicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semester3_real_estate_back_end.Models.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semester3_real_estate_back_end.Models.Ward", "Ward")
                        .WithMany("Properties")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Direction");

                    b.Navigation("Juridical");

                    b.Navigation("PropertyType");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.PropertyImage", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.Property", "Property")
                        .WithMany("PropertyImages")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Ward", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Category", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Direction", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.District", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Juridical", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Property", b =>
                {
                    b.Navigation("PropertyImages");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.PropertyType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Ward", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
