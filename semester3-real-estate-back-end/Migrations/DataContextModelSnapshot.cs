// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using semester3_real_estate_back_end.Data;

#nullable disable

namespace semester3_real_estate_back_end.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "70acc54a-44e0-4d31-8b07-52b5b82e9e55",
                            RoleId = "ffe56d39-3939-4c5c-ade9-8f147dca9591"
                        },
                        new
                        {
                            UserId = "4a9cd504-f018-4574-a525-98c07a998678",
                            RoleId = "28a11887-8723-4f56-a83f-f8d43529dfb9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = "ffe56d39-3939-4c5c-ade9-8f147dca9592",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3012),
                            Name = "House",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3012)
                        },
                        new
                        {
                            CategoryId = "ffe56d39-3939-4c5c-ade9-8f147dca9593",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3014),
                            Name = "Townhouse",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3015)
                        },
                        new
                        {
                            CategoryId = "ffe56d39-3939-4c5c-ade9-8f147dca9594",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3016),
                            Name = "Apartment & Unit",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3017)
                        },
                        new
                        {
                            CategoryId = "ffe56d39-3939-4c5c-ade9-8f147dca9595",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3018),
                            Name = "Shophouse",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3019)
                        },
                        new
                        {
                            CategoryId = "ffe56d39-3939-4c5c-ade9-8f147dca9596",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3020),
                            Name = "Villa",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3021)
                        },
                        new
                        {
                            CategoryId = "ffe56d39-3939-4c5c-ade9-8f147dca9597",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3023),
                            Name = "Retirement Living",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3023)
                        },
                        new
                        {
                            CategoryId = "ffe56d39-3939-4c5c-ade9-8f147dca9598",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3025),
                            Name = "Land",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3025)
                        },
                        new
                        {
                            CategoryId = "ffe56d39-3939-4c5c-ade9-8f147dca9599",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3027),
                            Name = "Warehouses",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3028)
                        },
                        new
                        {
                            CategoryId = "ffe56d39-3939-4c5c-ade9-8f147dca9600",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3029),
                            Name = "Residential",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3030)
                        },
                        new
                        {
                            CategoryId = "ffe56d39-3939-4c5c-ade9-8f147dca9601",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3032),
                            Name = "Mobile home",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3032)
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Direction", b =>
                {
                    b.Property<string>("DirectionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("DirectionId");

                    b.ToTable("Direction");

                    b.HasData(
                        new
                        {
                            DirectionId = "ffe56d39-3939-4c5c-ade9-8f147dca9594",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3231),
                            Name = "North",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3230)
                        },
                        new
                        {
                            DirectionId = "ffe56d39-3939-4c5c-ade9-8f147dca9595",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3233),
                            Name = "Northeast",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3233)
                        },
                        new
                        {
                            DirectionId = "ffe56d39-3939-4c5c-ade9-8f147dca9596",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3234),
                            Name = "East",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3234)
                        },
                        new
                        {
                            DirectionId = "ffe56d39-3939-4c5c-ade9-8f147dca9597",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3236),
                            Name = "Southeast",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3235)
                        },
                        new
                        {
                            DirectionId = "ffe56d39-3939-4c5c-ade9-8f147dca9598",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3237),
                            Name = "South",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3236)
                        },
                        new
                        {
                            DirectionId = "ffe56d39-3939-4c5c-ade9-8f147dca9599",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3238),
                            Name = "West",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3237)
                        },
                        new
                        {
                            DirectionId = "ffe56d39-3939-4c5c-ade9-8f147dca9600",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3239),
                            Name = "Northwest",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3239)
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("District");

                    b.HasData(
                        new
                        {
                            DistrictId = 1,
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3339),
                            Name = "District 1",
                            ProvinceId = 1,
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3339)
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Juridical", b =>
                {
                    b.Property<string>("JuridicalId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("JuridicalId");

                    b.ToTable("Juridical");

                    b.HasData(
                        new
                        {
                            JuridicalId = "ffe56d39-3939-4c5c-ade9-8f147dca9594",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3267),
                            Name = "Certificate of Land Use Rights, House Ownership, and Other Assets Attached to Land",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3266)
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Property", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Area")
                        .HasColumnType("REAL");

                    b.Property<int>("Bathroom")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bedroom")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DirectionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Floor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JuridicalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("PropertyTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("coverImage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PropertyId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DirectionId");

                    b.HasIndex("JuridicalId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("WardId");

                    b.ToTable("Property");

                    b.HasData(
                        new
                        {
                            PropertyId = "ffe56d39-3939-4c5c-ade9-8f147dca9581",
                            Address = "Address 1",
                            Area = 10.0,
                            Bathroom = 1,
                            Bedroom = 1,
                            CategoryId = "ffe56d39-3939-4c5c-ade9-8f147dca9592",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3389),
                            Description = "Description",
                            DirectionId = "ffe56d39-3939-4c5c-ade9-8f147dca9594",
                            Floor = 1,
                            JuridicalId = "ffe56d39-3939-4c5c-ade9-8f147dca9594",
                            Price = 10.0,
                            PropertyTypeId = "ffe56d39-3939-4c5c-ade9-8f147dca9595",
                            Title = "Property title 1",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3389),
                            UserId = "70acc54a-44e0-4d31-8b07-52b5b82e9e55",
                            ViewCount = 0,
                            WardId = 1,
                            coverImage = "/images/bfafb74b-0dcd-4187-9141-670f03ba97aa_onepunchman.PNG"
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.PropertyImage", b =>
                {
                    b.Property<string>("PropertyImageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PropertyImageId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImage");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.PropertyType", b =>
                {
                    b.Property<string>("PropertyTypeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("PropertyTypeId");

                    b.ToTable("PropertyType");

                    b.HasData(
                        new
                        {
                            PropertyTypeId = "ffe56d39-3939-4c5c-ade9-8f147dca9595",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3293),
                            Name = "For Sell",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3293)
                        },
                        new
                        {
                            PropertyTypeId = "ffe56d39-3939-4c5c-ade9-8f147dca9596",
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3296),
                            Name = "For Rent",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3295)
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("ProvinceId");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            ProvinceId = 1,
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3315),
                            Name = "Province 1",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3315)
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ffe56d39-3939-4c5c-ade9-8f147dca9591",
                            ConcurrencyStamp = "fc2bb248-fa76-4b84-b7e5-16f62b403546",
                            Description = "Admin role",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "28a11887-8723-4f56-a83f-f8d43529dfb9",
                            ConcurrencyStamp = "396aca1b-25fe-439d-8500-108e1d7f4223",
                            Description = "User role",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "70acc54a-44e0-4d31-8b07-52b5b82e9e55",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9934c5a0-6bfd-4fde-936d-c3ece61cf8d2",
                            Email = "cuong@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUONG@GMAIL.COM",
                            NormalizedUserName = "CUONG",
                            PasswordHash = "AQAAAAIAAYagAAAAEI/SWx93eTcgVMH5ll0cl2UAVQPvI9XX0kQPwNxgyGcz5ud88hHLZCxsxoQevxeeig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5VQFXGIF4X76SDIO4OLC3YTSQRVEZQDW",
                            TwoFactorEnabled = false,
                            UserName = "cuong"
                        },
                        new
                        {
                            Id = "4a9cd504-f018-4574-a525-98c07a998678",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "263312b7-be37-4d7f-bfd5-f8e935323be5",
                            Email = "daica@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "DAICA@GMAIL.COM",
                            NormalizedUserName = "DAICA",
                            PasswordHash = "AQAAAAIAAYagAAAAEFfBxpYGAi+a0Iog6fqmUcgFkirdMOqUynFaOVSoy9DsmTor/h7YSfKuQW2HZzLHmg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "RMVH3XFWGDEAFBVLMZBEHMGQF7LUOUVW",
                            TwoFactorEnabled = false,
                            UserName = "daica"
                        });
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Ward", b =>
                {
                    b.Property<int>("WardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DistrictId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("WardId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Ward");

                    b.HasData(
                        new
                        {
                            WardId = 1,
                            CreatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3364),
                            DistrictId = 1,
                            Name = "Ward 1",
                            UpdatedAt = new DateTime(2024, 11, 21, 16, 50, 37, 75, DateTimeKind.Local).AddTicks(3363)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semester3_real_estate_back_end.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.District", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Property", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.Category", "Category")
                        .WithMany("Properties")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semester3_real_estate_back_end.Models.Direction", "Direction")
                        .WithMany("Properties")
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semester3_real_estate_back_end.Models.Juridical", "Juridical")
                        .WithMany("Properties")
                        .HasForeignKey("JuridicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semester3_real_estate_back_end.Models.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semester3_real_estate_back_end.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semester3_real_estate_back_end.Models.Ward", "Ward")
                        .WithMany("Properties")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Direction");

                    b.Navigation("Juridical");

                    b.Navigation("PropertyType");

                    b.Navigation("User");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.PropertyImage", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.Property", "Property")
                        .WithMany("PropertyImages")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Ward", b =>
                {
                    b.HasOne("semester3_real_estate_back_end.Models.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Category", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Direction", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.District", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Juridical", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Property", b =>
                {
                    b.Navigation("PropertyImages");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.PropertyType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("semester3_real_estate_back_end.Models.Ward", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
